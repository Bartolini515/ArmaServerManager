"""
Django settings for forumSamorzadu project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import environ


# Alternative to mysqlclient
import pymysql
pymysql.install_as_MySQLdb()

# Initialization of .env file
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# LOGIN_URL = "/accounts/login/" # Setting redirect to login page


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

ALLOWED_HOSTS = [
    '127.0.0.1', # localhost
    'servermanager.fogarma3.pl', # Server IP
    
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # 'whitenoise.runserver_nostatic', # Tool for loading static files
    'django.contrib.staticfiles',
    'debug_toolbar', # Debugging tool
    'corsheaders', # Tool for API support with CORS
    'rest_framework', # Tool for API support with REST
    'knox', # Tool providing additional API protection
    'django_celery_beat', # Tool for scheduling tasks in Celery
    # MyApps
    'main', # Main application
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware', # Debugging tool, works only on localhost
    'django.middleware.security.SecurityMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware', # Tool for loading static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Tool for API support with CORS
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware', # Reads browser language and adapts the page to that language
]

INTERNAL_IPS = [
    # ...
    '127.0.0.1', # Defining localhost IP
    # ...
]

ROOT_URLCONF = 'servermanager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'servermanager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',       # Database engine, in this case MySQL
        'NAME': env('DATABASE_NAME'),               # Database name taken from .env file
        'USER': env('DATABASE_USER'),               # Username taken from .env file
        'PASSWORD': env('DATABASE_PASSWORD'),       # Password taken from .env file
        'HOST': env('DATABASE_HOST'),               # Server address
        'PORT': env('DATABASE_PORT'),               # Database port
        'CHARSET': 'utf8_general_ci',               # Text encoding

    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pl-pl'

TIME_ZONE = 'CET'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Define static files settings
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# STATICFILES_DIRS = [
#     BASE_DIR / 'static'
# ]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Headers
# CORS_ALLOW_ALL_ORIGINS = True # SECURITY WARNING: Don't run in production!
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',  # React dev server
    'https://servermanager.fogarma3.pl',  # Production server (HTTPS)
]
CORS_ALLOW_CREDENTIALS = not DEBUG

# SSL configuration and other security settings
SECURE_HSTS_SECONDS = 0 if DEBUG else 3600  # 1 hour
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_TRUSTED_ORIGINS = [
    'https://fogarma3.pl:8121',
    'https://servermanager.fogarma3.pl:8121',
]

# Max upload size
DATA_UPLOAD_MAX_MEMORY_SIZE = 268435456  # 256MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 268435456  # 256MB

# User model and auth
AUTH_USER_MODEL = "main.Profile"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication', 'rest_framework.authentication.SessionAuthentication',)
}

# Celery Configuration
CELERY_BROKER_URL = 'redis://127.0.0.1:6379'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Caching
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1", # Use a different DB number than Celery
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Celery Task Routing
CELERY_TASK_QUEUES = {
    'celery': {
        'exchange': 'celery',
        'binding_key': 'celery',
    },
    'download_queue': {
        'exchange': 'download_queue',
        'binding_key': 'download_queue',
    },
}

CELERY_TASK_ROUTES = {
    'main.tasks.download_mods_task': {'queue': 'download_queue'},
}

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    'check-all-server-status': {
        'task': 'main.tasks.check_all_servers_status_task',
        'schedule': 1800.0,  # In seconds
    },
}